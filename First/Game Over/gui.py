# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJhadav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, BOTH
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import ujson
import time
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 449
window_width = 696

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (695, 39), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (702, 36), job, type_="bottom")


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)

thesystem.system.animate_window_open(window, target_height, window_width, step=25, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(eve):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=25, delay=1)


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 449,
    width = 696,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    609.0,
    301.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
player = thesystem.system.FastVideoPlayer(canvas, np.load(video_path), 478.0, 313.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    348.0,
    233.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    379.0,
    110.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    186.0,
    110.0,
    image=image_image_4
)

# --- ADDED MULTI-STAGE ANIMATED GAME OVER TEXT ---

# 1. Create two sets of text items (and their shadows) with empty text.
# One set for the red text, one for the blue.

# Red text for "Player has died."
red_shadow_id = canvas.create_text(
    351.0, 213.0,
    anchor="s", # Anchor to the south (bottom) for easier positioning
    justify="center",
    text="",
    fill="#000000",
    font=("Montserrat", 20, "bold")
)
red_text_id = canvas.create_text(
    348.0, 210.0,
    anchor="s", # Anchor to the south (bottom)
    justify="center",
    text="",
    fill="#FF0000",
    font=("Montserrat", 20, "bold")
)

# Blue text for "Creating a new avatar..."
# Positioned just below the red text's anchor point
blue_shadow_id = canvas.create_text(
    351.0, 213.0,
    anchor="n", # Anchor to the north (top)
    justify="center",
    text="",
    fill="#000000",
    font=("Montserrat", 20, "bold")
)
blue_text_id = canvas.create_text(
    348.0, 210.0,
    anchor="n", # Anchor to the north (top)
    justify="center",
    text="",
    fill="#0099FF", # A distinct blue color
    font=("Montserrat", 20, "bold")
)


# 2. Define the animation functions for each stage

def fade_out_text(text_id, shadow_id, step=20):
    """Gradually fades the text color to black to make it disappear."""
    if step <= 0:
        canvas.itemconfig(text_id, text="") # Clear text at the end
        canvas.itemconfig(shadow_id, text="")
        return

    # Calculate the new color by reducing its brightness
    # This creates a fade-to-black effect.
    new_hex_val = f"#{step*8:02x}{0:02x}{0:02x}"
    
    try:
        canvas.itemconfig(text_id, fill=new_hex_val)
    except tk.TclError:
        # This handles cases where the window is closed during animation
        return

    # Schedule the next step of the fade
    canvas.after(50, fade_out_text, text_id, shadow_id, step - 1)


def animate_dots(base_text, dot_count=0, loop_count=0, max_loops=3):
    """Animates the '...' at the end of the blue text."""
    if loop_count >= max_loops:
        subprocess.Popen(['python', 'First/Info/gui.py'])
        ex_close(window)
        return

    if dot_count > 3:
        canvas.after(500, animate_dots, base_text, 0, loop_count + 1)
        return

    display_text = base_text + "." * dot_count
    canvas.itemconfig(blue_text_id, text=display_text)
    canvas.itemconfig(blue_shadow_id, text=display_text)
    
    canvas.after(400, animate_dots, base_text, dot_count + 1, loop_count)


def type_second_part(full_text, current_index=0):
    """Types out the blue 'Creating a new avatar...' text."""
    if current_index > len(full_text):
        base_text = full_text[:-3] # Text without the "..."
        animate_dots(base_text)
        return

    display_text = full_text[:current_index]
    canvas.itemconfig(blue_text_id, text=display_text)
    canvas.itemconfig(blue_shadow_id, text=display_text)

    canvas.after(75, type_second_part, full_text, current_index + 1)


def type_first_part(full_text, current_index=0):
    """Types out the red 'Player has died.' text."""
    if current_index > len(full_text):
        # When done, start fading out the red text AND typing the blue text
        fade_out_text(red_text_id, red_shadow_id)
        type_second_part("Creating a new avatar...")
        return

    display_text = full_text[:current_index]
    canvas.itemconfig(red_text_id, text=display_text)
    canvas.itemconfig(red_shadow_id, text=display_text)

    canvas.after(75, type_first_part, full_text, current_index + 1)


# 3. Start the entire animation sequence
type_first_part("Player has died.")

# --- END OF ANIMATED TEXT ---


image_0=canvas.create_rectangle(
    0.0,
    0.0,
    696.0,
    29.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    6.0,
    190.0,
    42.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    414.0,
    696.0,
    449.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    696.0,
    29.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    5.0,
    60.0,
    455.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    647.0,
    0.0,
    696.0,
    458.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    119.0,
    0.0,
    381.0,
    38.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    56.0,
    421.0,
    923.0,
    460.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    50.0,
    19.0,
    643.0,
    44.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    137.0,
    -10.0,
    765.0,
    50.0,
    fill="#0C679B",
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (47, 393))
canvas.create_image(33.0, 235.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (46, 385))
canvas.create_image(666.0, 235.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    348.0,
    29.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    357.0,
    437.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

update_images()


button_image_20 = PhotoImage(
    file=relative_to_assets("close.png"))
button_20 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_20.place(
    x=564.0,
    y=52.0,
    width=21.20473861694336,
    height=24.221660614013672
)


window.resizable(False, False)
window.mainloop()